<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>포켓몬 정보 - {{pokemon.koreanName}}</title>
    <link rel="stylesheet" href="/css/result.css">
</head>
<body>
{{>header}}
<div class="result-container type-{{pokemon.types.0.type.name}}">
    <div class="header">
        <div class="pokemon-id">#{{pokemon.id}}</div>
        <div class="pokemon-name">{{pokemon.koreanName}}</div>
        <div class="pokemon-name-english">({{pokemon.name}})</div>
    </div>

    <div class="search-section">
        <form class="search-form" action="/search" method="post">
            <input type="text"
                   name="query"
                   class="search-input"
                   placeholder="다른 포켓몬 검색하기"
                   required>
            <button type="submit" class="search-btn">검색</button>
        </form>
    </div>

    <div class="content">
        {{#pokemon.sprites.other.officialArtwork.frontDefault}}
            <div class="pokemon-image">
                <img src="{{pokemon.sprites.other.officialArtwork.frontDefault}}" alt="{{pokemon.koreanName}}">
            </div>
        {{/pokemon.sprites.other.officialArtwork.frontDefault}}
        {{^pokemon.sprites.other.officialArtwork.frontDefault}}
            {{#pokemon.sprites.frontDefault}}
                <div class="pokemon-image">
                    <img src="{{pokemon.sprites.frontDefault}}" alt="{{pokemon.koreanName}}">
                </div>
            {{/pokemon.sprites.frontDefault}}
        {{/pokemon.sprites.other.officialArtwork.frontDefault}}

        <!-- 즐겨찾기 섹션 - 동적으로 표시/숨김 -->
        <div id="favoriteSection" class="favorite-section" style="display: none;">
            <button id="favoriteBtn" class="favorite-btn" data-pokemon-id="{{pokemon.id}}">
                <span class="favorite-icon">⭐</span>
                <span class="favorite-text">즐겨찾기 추가</span>
            </button>
        </div>

        <!-- 로그인 안내 섹션 - 동적으로 표시/숨김 -->
        <div id="loginPrompt" class="login-prompt" style="display: none;">
            <p>즐겨찾기 기능을 사용하려면 로그인이 필요합니다</p>
            <a href="/users/login" class="login-link">로그인하러 가기</a>
        </div>

        <!-- 서버 렌더링된 로그인 상태 (세션 로그인) -->
        {{#loginUser}}
            <div class="favorite-section">
                <button id="sessionFavoriteBtn" class="favorite-btn" data-pokemon-id="{{pokemon.id}}">
                    <span class="favorite-icon">⭐</span>
                    <span class="favorite-text">즐겨찾기 추가</span>
                </button>
            </div>
        {{/loginUser}}

        {{^loginUser}}
            {{^jwtUser}}
                <!-- 세션과 JWT 모두 없을 때만 표시 -->
                <div id="staticLoginPrompt" class="login-prompt">
                    <p>즐겨찾기 기능을 사용하려면 로그인이 필요합니다</p>
                    <a href="/users/login" class="login-link">로그인하러 가기</a>
                </div>
            {{/jwtUser}}
        {{/loginUser}}

        <div class="info-grid">
            <div class="info-card">
                <h3>기본 정보</h3>
                <div class="basic-info">
                    <p><strong>이름:</strong> {{pokemon.koreanName}} ({{pokemon.name}})</p>
                    <p><strong>번호:</strong> #{{pokemon.id}}</p>
                    <p><strong>키:</strong> {{pokemon.height}}0cm</p>
                    <p><strong>몸무게:</strong> {{pokemon.weight}}kg</p>
                </div>
            </div>

            <div class="info-card">
                <h3>타입</h3>
                <div class="types">
                    {{#pokemon.types}}
                        <span class="type-tag type-{{type.name}}">
                            {{type.koreanName}}
                        </span>
                    {{/pokemon.types}}
                </div>
            </div>
        </div>

        <div class="stats-container">
            <h3>능력치</h3>
            {{#pokemon.stats}}
                <div class="stat-row">
                    <div class="stat-name">
                        {{stat.koreanName}}
                    </div>
                    <div class="stat-bar">
                        <div class="stat-fill" style="width: {{baseStat}}%"></div>
                    </div>
                    <div class="stat-value">{{baseStat}}</div>
                </div>
            {{/pokemon.stats}}
        </div>

        <a href="/" class="back-btn fixed-theme">다시 검색하기</a>
    </div>
</div>

<script>
    let isLoggedIn = false;
    let authType = null; // 'session' 또는 'jwt'

    document.addEventListener('DOMContentLoaded', function() {
        // 로그인 상태 확인 및 UI 초기화
        initializeLoginState();
    });

    async function initializeLoginState() {
        console.log('로그인 상태 초기화 시작...');

        // 1. 서버 렌더링된 세션 로그인 확인
        const sessionFavoriteBtn = document.getElementById('sessionFavoriteBtn');
        if (sessionFavoriteBtn) {
            console.log('세션 로그인 감지됨');
            isLoggedIn = true;
            authType = 'session';
            initializeFavoriteFunction(sessionFavoriteBtn);
            return;
        }

        // 2. JWT 토큰 확인
        const token = localStorage.getItem('jwtToken') || sessionStorage.getItem('jwtToken');
        console.log('JWT 토큰 확인:', token ? '토큰 존재' : '토큰 없음');

        if (token) {
            try {
                const response = await fetch('/api/auth/validate', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const result = await response.json();
                console.log('JWT 검증 결과:', result);

                if (result.success && result.data) {
                    // JWT 로그인 상태
                    console.log('JWT 로그인 상태 확인됨');
                    isLoggedIn = true;
                    authType = 'jwt';
                    showJwtFavoriteSection();
                } else {
                    // 토큰이 유효하지 않음
                    console.log('JWT 토큰 무효, 토큰 삭제');
                    localStorage.removeItem('jwtToken');
                    sessionStorage.removeItem('jwtToken');
                    showLoginPrompt();
                }
            } catch (error) {
                console.error('토큰 검증 실패:', error);
                showLoginPrompt();
            }
        } else {
            // 로그인되지 않은 상태
            console.log('로그인되지 않은 상태');
            showLoginPrompt();
        }
    }

    function showJwtFavoriteSection() {
        console.log('JWT 즐겨찾기 섹션 표시');

        // 정적 로그인 안내 숨기기
        const staticPrompt = document.getElementById('staticLoginPrompt');
        if (staticPrompt) {
            staticPrompt.style.display = 'none';
        }

        // JWT 즐겨찾기 섹션 표시
        const favoriteSection = document.getElementById('favoriteSection');
        const favoriteBtn = document.getElementById('favoriteBtn');

        if (favoriteSection && favoriteBtn) {
            favoriteSection.style.display = 'block';
            initializeFavoriteFunction(favoriteBtn);
        }
    }

    function showLoginPrompt() {
        console.log('로그인 안내 표시');

        // 정적 로그인 안내 표시 (이미 표시되어 있으면 그대로)
        const staticPrompt = document.getElementById('staticLoginPrompt');
        if (!staticPrompt) {
            const loginPrompt = document.getElementById('loginPrompt');
            if (loginPrompt) {
                loginPrompt.style.display = 'block';
            }
        }
    }

    function initializeFavoriteFunction(favoriteBtn) {
        if (!favoriteBtn) return;

        const pokemonId = favoriteBtn.dataset.pokemonId;
        console.log('즐겨찾기 기능 초기화 - Pokemon ID:', pokemonId, 'Auth Type:', authType);

        // 페이지 로드 시 즐겨찾기 상태 확인
        checkFavoriteStatus(pokemonId);

        // 즐겨찾기 버튼 클릭 이벤트
        favoriteBtn.addEventListener('click', function() {
            toggleFavorite(pokemonId);
        });
    }

    async function checkFavoriteStatus(pokemonId) {
        console.log('즐겨찾기 상태 확인:', pokemonId);

        try {
            const headers = getRequestHeaders();
            console.log('요청 헤더:', headers);

            const url = authType === 'jwt'
                    ? `/api/jwt/favorites/check/${pokemonId}`
                    : `/api/favorites/check/${pokemonId}`;

            const response = await fetch(url, {
                headers: headers
            });
            const result = await response.json();
            console.log('즐겨찾기 상태 응답:', result);

            if (result.success) {
                updateFavoriteButton(result.data);
            } else {
                console.error('즐겨찾기 상태 확인 실패:', result.message);
                if (response.status === 401) {
                    console.log('인증 오류 발생, 로그인 화면으로 전환');
                    showLoginPrompt();
                    isLoggedIn = false;
                    authType = null;
                }
            }
        } catch (error) {
            console.error('즐겨찾기 상태 확인 실패:', error);
        }
    }


    async function toggleFavorite(pokemonId) {
        const favoriteBtn = authType === 'session'
                ? document.getElementById('sessionFavoriteBtn')
                : document.getElementById('favoriteBtn');

        if (!favoriteBtn) return;

        const isFavorited = favoriteBtn.classList.contains('favorited');
        favoriteBtn.disabled = true;

        try {
            const headers = getRequestHeaders();
            let url;
            let method;

            if (isFavorited) {
                // 즐겨찾기 삭제
                url = authType === 'jwt'
                        ? `/api/jwt/favorites/${pokemonId}`
                        : `/api/favorites/${pokemonId}`;
                method = 'DELETE';
            } else {
                // 즐겨찾기 추가
                url = authType === 'jwt'
                        ? `/api/jwt/favorites`
                        : `/api/favorites`;
                method = 'POST';
            }

            const response = await fetch(url, {
                method: method,
                headers: headers,
                ...(method === 'POST' && {
                    body: JSON.stringify({ pokemonId: parseInt(pokemonId) })
                })
            });

            const result = await response.json();

            if (result.success) {
                updateFavoriteButton(!isFavorited);

                if (window.updateHeaderFavoriteCount) {
                    window.updateHeaderFavoriteCount();
                }

                showMessage(result.message || (isFavorited ? '즐겨찾기에서 삭제됨' : '즐겨찾기에 추가됨'));
            } else {
                showMessage(result.message || '오류 발생', 'error');
                if (response.status === 401) {
                    showLoginPrompt();
                    isLoggedIn = false;
                    authType = null;
                }
            }
        } catch (error) {
            console.error('즐겨찾기 처리 실패:', error);
            showMessage('네트워크 오류가 발생했습니다.', 'error');
        } finally {
            favoriteBtn.disabled = false;
        }
    }


    function getRequestHeaders() {
        const headers = {
            'Content-Type': 'application/json'
        };

        if (authType === 'jwt') {
            // JWT 토큰이 있으면 Authorization 헤더 포함
            const token = localStorage.getItem('jwtToken') || sessionStorage.getItem('jwtToken');
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }
        }

        console.log('생성된 요청 헤더:', headers);
        return headers;
    }

    function updateFavoriteButton(isFavorited) {
        console.log('즐겨찾기 버튼 업데이트:', isFavorited);

        const favoriteBtn = authType === 'session' ?
                document.getElementById('sessionFavoriteBtn') :
                document.getElementById('favoriteBtn');

        if (!favoriteBtn) return;

        const favoriteText = favoriteBtn.querySelector('.favorite-text');

        if (isFavorited) {
            favoriteBtn.classList.add('favorited');
            favoriteText.textContent = '즐겨찾기 삭제';
        } else {
            favoriteBtn.classList.remove('favorited');
            favoriteText.textContent = '즐겨찾기 추가';
        }
    }

    function showMessage(message, type = 'success') {
        // 간단한 토스트 메시지 표시
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#ff4757' : '#2ed573'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
    `;

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // CSS 애니메이션 추가
    const style = document.createElement('style');
    style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
    document.head.appendChild(style);
</script>

</body>
</html>