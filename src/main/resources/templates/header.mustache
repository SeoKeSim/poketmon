<head>
    <link rel="stylesheet" href="/css/header.css">
    <!-- JWT 유틸리티 스크립트 추가 -->
    <script src="/js/jwt-utils.js"></script>
</head>
<header class="header">
    <div class="header-container">
        <div class="header-left">
            <a href="/" class="logo-link">
                <img src="/image/pokemon_logo.png" alt="포켓몬 로고" class="header-logo">
            </a>
        </div>

        <nav class="header-nav">
            {{#loginUser}}
                <!-- 세션 로그인된 상태 -->
                <div class="nav-menu">
                    <a id="favoriteLink" href="/favorites" class="nav-link favorites-link">
                        <span class="favorites-icon">⭐</span>
                        <span class="favorites-text">내 즐겨찾기</span>
                        <span class="favorites-count-badge" id="headerFavoriteCount"></span>
                    </a>
                </div>

                <div class="user-info">
                    <span class="welcome-text">{{userName}}님 환영합니다!</span>
                    <form action="/users/logout" method="post" class="logout-form">
                        <button type="submit" class="logout-btn">로그아웃</button>
                    </form>
                </div>
            {{/loginUser}}

            {{#jwtUser}}
                {{^loginUser}}
                    <!-- JWT 로그인된 상태 (세션 로그인이 없을 때만) -->
                    <div class="nav-menu">
                        <a id="favoriteLink" href="/jwt/favorites" class="nav-link favorites-link">
                            <span class="favorites-icon">⭐</span>
                            <span class="favorites-text">내 즐겨찾기</span>
                            <span class="favorites-count-badge" id="headerFavoriteCount"></span>
                        </a>
                    </div>

                    <div class="user-info">
                        <span class="welcome-text">{{userId}}님 환영합니다! (JWT)</span>
                        <button onclick="jwtLogout()" class="logout-btn">로그아웃</button>
                    </div>
                {{/loginUser}}
            {{/jwtUser}}

            {{^loginUser}}
                {{^jwtUser}}
                    <!-- 로그인되지 않은 상태 -->
                    <div class="auth-buttons">
                        <a href="/users/login" class="auth-btn login-btn">로그인</a>
                        <a href="/users/register" class="auth-btn register-btn">회원가입</a>
                    </div>
                {{/jwtUser}}
            {{/loginUser}}
        </nav>
    </div>
</header>

<script>
    // 즐겨찾기 개수 업데이트 (로그인된 경우에만)
    document.addEventListener('DOMContentLoaded', function() {
        const favoriteCountBadge = document.getElementById('headerFavoriteCount');
        if (favoriteCountBadge) {
            updateHeaderFavoriteCount();
        }

        // JWT 로그인 상태 확인하여 헤더 동적 업데이트
        updateHeaderForJWT();
    });

    async function updateHeaderFavoriteCount() {
        try {
            // JwtUtils 사용으로 변경
            const headers = JwtUtils ? JwtUtils.getAuthHeaders() : { 'Content-Type': 'application/json' };
            const token = JwtUtils ? JwtUtils.getToken() : null;

            let apiUrl = '/api/favorites/count';

            // JWT 토큰이 있으면 JWT API 사용
            if (token) {
                apiUrl = '/api/jwt/favorites/count';
            }

            const response = await fetch(apiUrl, { headers });
            const result = await response.json();

            if (result.success && result.data > 0) {
                const badge = document.getElementById('headerFavoriteCount');
                if (badge) {
                    badge.textContent = result.data;
                    badge.style.display = 'inline-block';
                }
            }
        } catch (error) {
            console.log('즐겨찾기 개수 조회 실패:', error);
        }
    }

    async function updateHeaderForJWT() {
        const token = JwtUtils ? JwtUtils.getToken() : null;

        // 서버에서 이미 로그인 상태라면 JWT 업데이트 안함
        const isServerLoggedIn = document.querySelector('.user-info') !== null;
        if (isServerLoggedIn) {
            return;
        }

        if (token) {
            try {
                const response = await fetch('/api/auth/validate', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const result = await response.json();

                if (result.success && result.data) {
                    // JWT 로그인 상태로 헤더 업데이트
                    updateHeaderToJWTLoggedIn(result.data.userId);
                } else {
                    // 토큰이 유효하지 않으면 제거
                    if (JwtUtils) {
                        JwtUtils.removeToken();
                    }
                }
            } catch (error) {
                console.log('토큰 검증 실패:', error);
            }
        }
    }

    function updateHeaderToJWTLoggedIn(userId) {
        const headerNav = document.querySelector('.header-nav');
        if (headerNav) {
            headerNav.innerHTML = `
            <div class="nav-menu">
                <a href="javascript:void(0);" onclick="goToFavorites()" class="nav-link favorites-link">
                    <span class="favorites-icon">⭐</span>
                    <span class="favorites-text">내 즐겨찾기</span>
                    <span class="favorites-count-badge" id="headerFavoriteCount"></span>
                </a>
            </div>
            <div class="user-info">
                <span class="welcome-text">${userId}님 환영합니다! (JWT)</span>
                <button onclick="jwtLogout()" class="logout-btn">로그아웃</button>
            </div>
        `;

            // 즐겨찾기 개수 다시 업데이트
            updateHeaderFavoriteCount();
        }
    }

    // 하위 호환성을 위해 기존 함수들 유지
    function getAuthHeaders() {
        return JwtUtils ? JwtUtils.getAuthHeaders() : { 'Content-Type': 'application/json' };
    }

    // 전역 함수로 다른 페이지에서도 사용할 수 있도록
    window.updateHeaderFavoriteCount = updateHeaderFavoriteCount;
    window.getAuthHeaders = getAuthHeaders;
</script>