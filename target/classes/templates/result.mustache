<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>포켓몬 정보 - {{pokemon.koreanName}}</title>
    <link rel="stylesheet" href="/css/result.css">
</head>
<body>
<!--<a href="/" class="logo_h">-->
<!--    <img src="/image/pokemon_logo.png" alt="포켓몬 로고" class="pokemon-logo">-->
<!--</a>-->
{{>header}}
<div class="result-container type-{{pokemon.types.0.type.name}}">
    <div class="header">
        <div class="pokemon-id">#{{pokemon.id}}</div>
        <div class="pokemon-name">{{pokemon.koreanName}}</div>
        <div class="pokemon-name-english">({{pokemon.name}})</div>
    </div>

    <div class="search-section">
        <form class="search-form" action="/search" method="post">
            <input type="text"
                   name="query"
                   class="search-input"
                   placeholder="다른 포켓몬 검색하기"
                   required>
            <button type="submit" class="search-btn">검색</button>
        </form>
    </div>

    <div class="content">
        {{#pokemon.sprites.other.officialArtwork.frontDefault}}
            <div class="pokemon-image">
                <img src="{{pokemon.sprites.other.officialArtwork.frontDefault}}" alt="{{pokemon.koreanName}}">
            </div>
        {{/pokemon.sprites.other.officialArtwork.frontDefault}}
        {{^pokemon.sprites.other.officialArtwork.frontDefault}}
            {{#pokemon.sprites.frontDefault}}
                <div class="pokemon-image">
                    <img src="{{pokemon.sprites.frontDefault}}" alt="{{pokemon.koreanName}}">
                </div>
            {{/pokemon.sprites.frontDefault}}
        {{/pokemon.sprites.other.officialArtwork.frontDefault}}

        <!-- 즐겨찾기 섹션 -->
        {{#loginUser}}
            <div class="favorite-section">
                <button id="favoriteBtn" class="favorite-btn" data-pokemon-id="{{pokemon.id}}">
                    <span class="favorite-icon">⭐</span>
                    <span class="favorite-text">즐겨찾기 추가</span>
                </button>
            </div>
        {{/loginUser}}

        {{^loginUser}}
            <div class="login-prompt">
                <p>즐겨찾기 기능을 사용하려면 로그인이 필요합니다</p>
                <a href="/users/login" class="login-link">로그인하러 가기</a>
            </div>
        {{/loginUser}}

        <div class="info-grid">
            <div class="info-card">
                <h3>기본 정보</h3>
                <div class="basic-info">
                    <p><strong>이름:</strong> {{pokemon.koreanName}} ({{pokemon.name}})</p>
                    <p><strong>번호:</strong> #{{pokemon.id}}</p>
                    <p><strong>키:</strong> {{pokemon.height}}0cm</p>
                    <p><strong>몸무게:</strong> {{pokemon.weight}}kg</p>
                </div>
            </div>

            <div class="info-card">
                <h3>타입</h3>
                <div class="types">
                    {{#pokemon.types}}
                        <span class="type-tag type-{{type.name}}">
                            {{type.koreanName}}
                        </span>
                    {{/pokemon.types}}
                </div>
            </div>
        </div>

        <div class="stats-container">
            <h3>능력치</h3>
            {{#pokemon.stats}}
                <div class="stat-row">
                    <div class="stat-name">
                        {{stat.koreanName}}
                    </div>
                    <div class="stat-bar">
                        <div class="stat-fill" style="width: {{baseStat}}%"></div>
                    </div>
                    <div class="stat-value">{{baseStat}}</div>
                </div>
            {{/pokemon.stats}}
        </div>

        <a href="/" class="back-btn fixed-theme">다시 검색하기</a>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const favoriteBtn = document.getElementById('favoriteBtn');
        if (favoriteBtn) {
            const pokemonId = favoriteBtn.dataset.pokemonId;

            // 페이지 로드 시 즐겨찾기 상태 확인
            checkFavoriteStatus(pokemonId);

            // 즐겨찾기 버튼 클릭 이벤트
            favoriteBtn.addEventListener('click', function() {
                toggleFavorite(pokemonId);
            });
        }
    });

    async function checkFavoriteStatus(pokemonId) {
        try {
            const response = await fetch(`/api/favorites/check/${pokemonId}`);
            const result = await response.json();

            if (result.success) {
                updateFavoriteButton(result.data);
            }
        } catch (error) {
            console.log('즐겨찾기 상태 확인 실패:', error);
        }
    }

    async function toggleFavorite(pokemonId) {
        const favoriteBtn = document.getElementById('favoriteBtn');
        const isFavorited = favoriteBtn.classList.contains('favorited');

        favoriteBtn.disabled = true;

        try {
            let response;
            if (isFavorited) {
                // 즐겨찾기 삭제
                response = await fetch(`/api/favorites/${pokemonId}`, {
                    method: 'DELETE'
                });
            } else {
                // 즐겨찾기 추가
                response = await fetch('/api/favorites', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ pokemonId: parseInt(pokemonId) })
                });
            }

            const result = await response.json();

            if (result.success) {
                updateFavoriteButton(!isFavorited);

                // 헤더의 즐겨찾기 개수 업데이트
                if (window.updateHeaderFavoriteCount) {
                    window.updateHeaderFavoriteCount();
                }

                // 성공 메시지 표시 (선택사항)
                showMessage(result.message || (isFavorited ? '즐겨찾기에서 삭제되었습니다.' : '즐겨찾기에 추가되었습니다.'));
            } else {
                showMessage(result.message || '오류가 발생했습니다.', 'error');
            }
        } catch (error) {
            console.error('즐겨찾기 처리 실패:', error);
            showMessage('네트워크 오류가 발생했습니다.', 'error');
        } finally {
            favoriteBtn.disabled = false;
        }
    }

    function updateFavoriteButton(isFavorited) {
        const favoriteBtn = document.getElementById('favoriteBtn');
        const favoriteText = favoriteBtn.querySelector('.favorite-text');

        if (isFavorited) {
            favoriteBtn.classList.add('favorited');
            favoriteText.textContent = '즐겨찾기 삭제';
        } else {
            favoriteBtn.classList.remove('favorited');
            favoriteText.textContent = '즐겨찾기 추가';
        }
    }

    function showMessage(message, type = 'success') {
        // 간단한 토스트 메시지 표시
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#ff4757' : '#2ed573'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
    `;

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // CSS 애니메이션 추가
    const style = document.createElement('style');
    style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
    document.head.appendChild(style);
</script>

</body>
</html>